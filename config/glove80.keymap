/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include "keys_de.h"
#include "helper.h"
#include "keypos_glv80.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers
#define DEFAULT 0
#define SYM 1
#define NAV 2
#define TRI 3
#define MAGIC 4

/*                               GLOVE80 KEY MATRIX / LAYOUT MAPPING
 ╭────────────────────╮       ╭────────────────────╮ ╭────────────────────╮       ╭────────────────────╮
 │  0   1   2   3   4 ╰───┬───╯  5   6   7   8   9 │ │ LC5 LC4 LC3 LC2 LC1╰───┬───╯ RC1 RC2 RC3 RC4 RC5│
 │ 10  11  12  13  14  15 │ 16  17  18  19  20  21 │ │ LN5 LN4 LN3 LN2 LN1 LN0│ RN0 RN1 RN2 RN3 RN4 RN5│
 │ 22  23  24  25  26  27 │ 28  29  30  31  32  33 │ │ LT5 LT4 LT3 LT2 LT1 LT0│ RT0 RT1 RT2 RT3 RT4 RT5│
 │ 34  35  36  37  38  39 │ 40  41  42  43  44  45 │ │ LM5 LM4 LM3 LM2 LM1 LM0│ RM0 RM1 RM2 RM3 RM4 RM5│
 │ 46  47  48  49  50  51 │ 58  59  60  61  62  63 │ │ LB5 LB4 LB3 LB2 LB1 LB0│ RB0 RB1 RB2 RB3 RB4 RB5│
 │ 64  65  66  67  68 ╭───┴───╮ 75  76  77  78  79 │ │ LF5 LF4 LF3 LF2 LF1╭───┴───╮ RF1 RF2 RF3 RF4 RF5│
 ╰───────────┬────────┴───┬───┴────────┬───────────╯ ╰───────────┬────────┴───┬───┴────────┬───────────╯
             │ 52  53  54 │ 55  56  57 │                         │ LH5 LH4 LH3│ RH3 RH4 RH5│
             │ 69  70  71 │ 72  73  74 │                         │ LH2 LH1 LH0│ RH0 RH1 RH2│
             ╰────────────┴────────────╯                         ╰────────────┴────────────╯
 */

&caps_word {
    continue-list = <UNDERSCORE MINUS>;
};

/ {
    behaviors {
        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
        // you have to hit the other key within 100ms to get a tap
        // if holding its key2 spam, if tapping fast its key2, if tap combining its key1
        pht: positional_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-unless-interrupted";
            tapping-term-ms = <100>; // <---[[produces tap if held longer than tapping-term-ms]]
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
            // hold-trigger-key-positions = <5 6 7 8 9 10>;    // <---[[right-hand keys]]
        };
        // if holding its key1, if tapping its key2
        hrm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <200>;
            quick-tap-ms = <280>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_oe {
            timeout-ms = <50>;
            key-positions = <25 31>;
            bindings = <&kp DE_O_UMLAUT>;
            layers = <0>;
        };
        combo_ue {
            timeout-ms = <50>;
            key-positions = <25 29>;
            bindings = <&kp DE_U_UMLAUT>;
            layers = <0>;
        };
        combo_ae {
            timeout-ms = <50>;
            key-positions = <25 35>;
            bindings = <&kp DE_A_UMLAUT>;
            layers = <0>;
        };
        combo_sz {
            timeout-ms = <50>;
            key-positions = <28 36>;
            bindings = <&kp DE_SZ>;
            layers = <0>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // These have to be in order of the layers defined at the top of the file
        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Z   |   U   |   I   |  O   |   P   |   \  |
            // |  CAPS |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  <  |  Y  |  X   |  C   |  V   | LSHFT | LCTRL | LOWER | | RCMD  | RCTRL | RSHFT |  B   |   N   |   M   |  ,   |   .   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | SPACE | DEL   | LCMD  | | RALT  | BSPC  | RET   |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
                    &kp F1            &kp F2            &kp F3           &kp F4           &kp F5                                                                                                              &kp F6          &kp F7         &kp F8               &kp F9        &kp F10
                    &kp DE_LT         &kp N1            &kp N2           &kp N3           &kp N4           &kp N5                                                                                             &kp N6          &kp N7         &kp N8               &kp N9        &kp N0               &kp MINUS
                    &kp TAB           &kp Q             &kp W            &kp E            &kp R            &kp T                                                                                              &kp Y           &kp U          &kp I                &kp O         &kp P                &kp DE_U_UMLAUT
                    &kp CAPSLOCK      &hrm LGUI A       &hrm LALT S      &hrm LCTRL D     &hrm LSHFT F     &hrm RGUI G                                                                                        &hrm RGUI H     &hrm LSHFT J   &hrm LCTRL K         &hrm LALT L   &hrm LGUI DE_COLON   &kp DE_MINUS
                    &none             &kp DE_CARET      &kp Z            &kp X            &kp C            &kp V          &kp LSHFT        &kp LALT      &sk LCTRL    &kp RGUI    &kp RCTRL   &kp RSHFT       &kp B           &kp N          &kp M                &kp COMMA     &kp DOT              &none
                    &magic MAGIC 0    &kp HOME          &kp END          &none            &none                           &lt NAV SPACE    &kp TAB       &key_repeat  &kp DEL     &kp BSPC    &lt SYM RET                     &sk LSHFT      &kp LG(LS(SPACE))    &kp LBKT      &kp RBKT             &none
            >;
        };

        sym_layer {
            bindings = <
                    &trans            &trans              &trans          &trans          &trans                                                                                                                            &trans               &trans               &trans        &trans              &trans
                    &trans            &trans              &trans          &trans          &trans               &trans                                                                                  &trans               &trans               &trans               &trans        &trans              &trans
                    &trans            &kp DE_QUESTION     &kp DE_PLUS     &kp DE_EQUAL    &trans               &kp DE_PERCENT                                                                          &kp DE_EXCLAMATION   &kp LA(N5)           &kp LA(N6)           &trans        &kp DE_PIPE         &trans
                    &trans            &kp DE_AMPERSAND    &kp DE_STAR     &kp DE_SLASH    &kp DE_DOUBLE_QUOTES &kp DE_GRAVE                                                                            &kp DE_SLASH         &kp DE_LPAR          &kp DE_RPAR          &kp DE_HASH   &kp DE_UNDERSCORE   &trans
                    &trans            &trans              &kp DE_SQT      &kp DE_ACUTE    &kp DE_LT            &kp DE_GT       &trans      &trans      &trans      &trans      &trans      &trans      &trans               &kp LA(N8)           &kp LA(N9)           &trans        &trans              &trans
                    &trans            &trans              &trans          &trans          &trans                               &trans      &trans      &trans      &trans      &trans      &trans                           &trans               &trans               &trans        &trans              &trans
            >;
        };

        nav_layer {
            bindings = <
                    &trans            &trans              &trans          &trans              &trans                                                                                                                    &trans           &trans        &trans        &trans   &trans
                    &trans            &trans              &trans          &trans              &trans               &trans                                                                                  &trans       &trans           &trans        &trans        &trans   &trans
                    &trans            &trans              &trans          &trans              &trans               &trans                                                                                  &kp LG(LEFT) &kp PG_DN        &kp PG_UP     &kp LG(RIGHT) &trans   &trans
                    &trans            &trans              &trans          &trans              &trans               &trans                                                                                  &kp LEFT     &kp DOWN         &kp UP        &kp RIGHT     &trans   &trans
                    &trans            &trans              &trans          &trans              &trans               &trans          &trans      &trans      &trans      &trans      &trans      &trans      &trans       &kp LC(LS(TAB))  &kp LC(TAB)   &trans        &trans   &trans
                    &trans            &trans              &trans          &trans              &trans                               &trans      &trans      &trans      &trans      &trans      &trans                   &trans           &trans        &trans        &trans   &trans
            >;
        };

        tri_layer {
            bindings = <
                    &trans            &trans              &trans          &trans          &trans                                                                                                               &trans         &trans    &trans     &trans   &trans
                    &trans            &trans              &trans          &trans          &trans          &trans                                                                                  &trans       &trans         &trans    &trans     &trans   &trans
                    &trans            &trans              &trans          &trans          &trans          &trans                                                                                  &trans       &trans         &trans    &trans     &trans   &trans
                    &trans            &trans              &trans          &trans          &caps_word      &trans                                                                                  &trans       &kp LA(LG(C))  &trans    &trans     &trans   &trans
                    &trans            &trans              &trans          &trans          &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans      &trans       &trans         &trans    &trans     &trans   &trans
                    &trans            &trans              &trans          &trans          &trans                          &trans      &trans      &trans      &trans      &trans      &trans                   &trans         &trans    &trans     &trans   &trans
            >;
        };

        magic_layer {
            bindings = <
            &bt BT_CLR        &none               &none           &none           &none                                                                                                           &none      &none      &none      &none      &bt BT_CLR_ALL
            &none             &none               &none           &none           &none           &none                                                                                &none      &none      &none      &none      &none      &none
            &none             &rgb_ug RGB_SPI     &rgb_ug RGB_SAI &rgb_ug RGB_HUI &rgb_ug RGB_BRI &rgb_ug RGB_TOG                                                                      &none      &none      &none      &none      &none      &none
            &bootloader       &rgb_ug RGB_SPD     &rgb_ug RGB_SAD &rgb_ug RGB_HUD &rgb_ug RGB_BRD &rgb_ug RGB_EFF                                                                      &none      &none      &none      &none      &none      &bootloader
            &sys_reset        &none               &none           &none           &none           &none           &bt_2     &bt_3     &none            &none     &none     &none       &none      &none      &none      &none      &none      &sys_reset
            &none             &none               &none           &none           &none                           &bt_0     &bt_1     &out OUT_USB     &none     &none     &none                  &none      &none      &none      &none      &none
            >;
        };
    };
};


// clean_trans_layer {
//     bindings = <
//         &trans            &trans              &trans          &trans          &trans                                                                                                               &trans    &trans    &trans     &trans   &trans
//         &trans            &trans              &trans          &trans          &trans          &trans                                                                                  &trans       &trans    &trans    &trans     &trans   &trans
//         &trans            &trans              &trans          &trans          &trans          &trans                                                                                  &trans       &trans    &trans    &trans     &trans   &trans
//         &trans            &trans              &trans          &trans          &trans          &trans                                                                                  &trans       &trans    &trans    &trans     &trans   &trans
//         &trans            &trans              &trans          &trans          &trans          &trans          &trans      &trans      &trans      &trans      &trans      &trans      &trans       &trans    &trans    &trans     &trans   &trans
//         &trans            &trans              &trans          &trans          &trans                          &trans      &trans      &trans      &trans      &trans      &trans                   &trans    &trans    &trans     &trans   &trans
//     >;
// };
